#! /usr/bin/perl -w
use strict;
use autodie;
no warnings 'uninitialized';	
use LWP::Simple qw( $ua );
use XML::LibXML;
use Getopt::Long;

our $mol_url = "https://www.rcsb.org/pdb/rest/describeMol?structureId=";
our $pdb_url = "https://www.rcsb.org/pdb/rest/describePDB?structureId=";
our $chem_url = "https://www.rcsb.org/pdb/rest/describeHet?chemicalID=";
our $smiles_url = "https://www.rcsb.org/pdb/rest/smilesQuery?smiles=";
our $ligand_url = "https://www.rcsb.org/pdb/rest/ligandInfo?structureId=";
our $grab_url = "ftp://ftp.wwpdb.org/pub/pdb/data/structures/all/pdb/pdb"; 
our $rest_search ='http://www.rcsb.org/pdb/rest/search/';
our $das_url = "https://www.rcsb.org/pdb/rest/das/pdbchainfeatures/sequence?segment=";
our $go_url = "https://www.rcsb.org/pdb/rest/goTerms?structureId=";
our $blast_url = "https://www.rcsb.org/pdb/rest/getBlastPDB1?sequence=";

sub query_gen {
	my (%arg)  = @_;
	my $type =       $arg{type}        // '';
	my $title =      $arg{title}       // '';
	my $author=      $arg{author}	   // '';
	my $min    =     $arg{min}		   // '';
	my $max    =     $arg{max}		   // '';
	my $protein =    $arg{protein}     // 'N';
	my $DNA =        $arg{DNA}         // 'N';
	my $RNA = 	     $arg{RNA}         // 'N';
	my $hybrid=	     $arg{hybrid}      // 'N';
	my $assembly=    $arg{assembly}    // '';
	my $organism=    $arg{organism}    // '';
	my $motif=       $arg{motif}       // '';
	my $name=        $arg{name}        // '';
	my $target=      $arg{target}      // 'Any';
	my $polymerType= $arg{polymerType} // 'Any';

	our $query='';
	if ($type eq 'author')
	{
		$query = qq(
	<orgPdbQuery>
	<version>B0905</version>
	<queryType>org.pdb.query.simple.AdvancedAuthorQuery</queryType>
	<description>Author query of $author</description>
	<searchType>All Authors</searchType>
	<audit_author.name>$author</audit_author.name>
	<exactMatch>false</exactMatch>
	</orgPdbQuery>
	);
	}
	if ($type eq 'date')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.DepositDateQuery</queryType>
	<pdbx_database_status.recvd_initial_deposition_date.min>$min</pdbx_database_status.recvd_initial_deposition_date.min>
	<pdbx_database_status.recvd_initial_deposition_date.max>$max</pdbx_database_status.recvd_initial_deposition_date.max>
	</orgPdbQuery>
	);
	}
	if ($type eq 'releaseDate')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.ReleaseDateQuery</queryType>
	<pdbx_audit_revision_history.revision_date.comparator>between</pdbx_audit_revision_history.revision_date.comparator>
	<pdbx_audit_revision_history.revision_date.min>$min</pdbx_audit_revision_history.revision_date.min>
	<pdbx_audit_revision_history.revision_date.max>$max</pdbx_audit_revision_history.revision_date.max>
	<pdbx_audit_revision_history.ordinal.value>1</pdbx_audit_revision_history.ordinal.value>
	</orgPdbQuery>
	);
	}
	if ($type eq 'revisionDate')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.ReviseDateQuery</queryType>
	<pdbx_audit_revision_history.revision_date.comparator>between</pdbx_audit_revision_history.revision_date.comparator>
	<pdbx_audit_revision_history.revision_date.min>$min</pdbx_audit_revision_history.revision_date.min>
	<pdbx_audit_revision_history.revision_date.max>$max</pdbx_audit_revision_history.revision_date.max>
	<pdbx_audit_revision_history.ordinal.value>1</pdbx_audit_revision_history.ordinal.value>
	</orgPdbQuery>	
	);
	}
	if ($type eq 'macromolecule')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.ChainTypeQuery</queryType>
	<description>Chain Type Search : Contains Protein=Y, Contains DNA=Y, Contains RNA=N, Contains DNA/RNA Hybrid=Y</description>
	<containsProtein>$protein</containsProtein>
	<containsDna>$DNA</containsDna>
	<containsRna>$RNA</containsRna>
	<containsHybrid>$hybrid</containsHybrid>
	</orgPdbQuery>
	);
	}
	if ($type eq 'chainNum')
	{
		if ($assembly eq 'asymmetric')
		{
			$query = qq(
		<orgPdbQuery>
		<queryType>org.pdb.query.simple.NumberOfChainsQuery</queryType>
		<description>Number of Chains Search</description>
		<struct_asym.numChains.min>$min</struct_asym.numChains.min>
		<struct_asym.numChains.max>$max</struct_asym.numChains.max>
		</orgPdbQuery>
		);
		}
		if ($assembly eq 'biological')
		{
			$query = qq(
		<orgPdbQuery>
		<queryType>org.pdb.query.simple.BiolUnitQuery</queryType>
		<description>Oligomeric state Search : Min Number of oligomeric state=$min Max Number of oligomeric state=$max</description>
		<oligomeric_statemin>$min</oligomeric_statemin>
		<oligomeric_statemax>$max</oligomeric_statemax>
		</orgPdbQuery>
		);
		}
	}
	if($type eq 'entNum')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.NumberOfEntitiesQuery</queryType>
	<description>Number of Entities Search : Entity Type=Protein Min Number of Entities=$min Max Number of Entities=$max</description>
	<entity.type.>p</entity.type.>
	<struct_asym.numEntities.min>$min</struct_asym.numEntities.min>
	<struct_asym.numEntities.max>$max</struct_asym.numEntities.max>
	</orgPdbQuery>
	);
	}
	if ($type eq 'title')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.StructTitleQuery</queryType>
	<description>StructTitleQuery: struct.title.comparator=contains struct.title.value=${title}</description>
	<struct.title.comparator>contains</struct.title.comparator>
	<struct.title.value>${title}</struct.title.value>
	</orgPdbQuery>
	);
	}
	if ($type eq 'binding')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.BindingAffinityQuery</queryType>
	<description>Binding Affinity: Binging affinity min is 10 and Binding affinity max is 20 and Affinity Type is Ki</description>
	<bindingAffinityComparator>between</bindingAffinityComparator>
	<bingingAffinityMin>$min</bingingAffinityMin>
	<bindingAffinityMax>$max</bindingAffinityMax>
	<affinityType>Ki</affinityType>
	</orgPdbQuery>
	);
	}
	if ($type eq 'organism')
	{
		$query = qq(
	<orgPdbQuery>
 	<version>B0905</version>
 	<queryType>org.pdb.query.simple.OrganismQuery</queryType>
 	<description>Organism Search: Organism Name=$organism</description>
 	<organismName>$organism</organismName>
	</orgPdbQuery>
	);
	}
	if ($type eq 'seqMotif')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.MotifQuery</queryType>
	<description>Motif Query For: $motif</description>
	<motif>$motif</motif>
	</orgPdbQuery>
	);
	}
	if ($type eq 'chemName')
	{
		$query = qq(
	<orgPdbQuery>
	<queryType>org.pdb.query.simple.ChemCompNameQuery</queryType>
	<description>Chemical Name: Name Contains $name and Polymeric type is $polymerType</description>
	<target>$target</target>
	<comparator>Contains</comparator>
	<name>$name</name>
	<polymericType>$polymerType</polymericType>
	</orgPdbQuery>
	);
	}
	return $query;
}	

sub id_to_name {
	my(%arg) = @_;
	my $IDlist_ref = $arg{IDlist_ref}  // '';
	my $meta	   = $arg{meta}        // 'title';
	my $url='';
	foreach my $ID (@$IDlist_ref)
	 {
		print "$ID\t";
		if (length($ID) eq 4){$url = join("","$pdb_url","$ID");}
		if (length($ID) eq 3){$url = join("","$chem_url","$ID");}
		my $get = `wget -q -O - \"$url\"`; 
		my $xml = XML::LibXML->load_xml(string => $get);
		foreach my $PDB ($xml->findnodes('//PDB'))
		{
			if ($meta eq 'title'){print $PDB->getAttribute('title');}
			if ($meta eq 'author'){print $PDB->getAttribute('citation_authors');}
		}
		foreach my $name ($xml->findnodes('//chemicalName'))
		{
			print $name->string_value();
		}
		print "\n";
	}	
}

sub disp_xml {
	my($xml, $type, $vb) = @_;
	if ($type eq "molid")
	{
		foreach my $polymer ($xml->findnodes('//polymer'))
		{
			foreach my $synonym ($polymer->findnodes('synonym'))
			{
				print "\nNAME:      ";
				print $synonym->getAttribute('name');
			}
			foreach my $polymerDes ($polymer->findnodes('polymerDescription'))
			{
				print "\nALT NAME:  ";
				print $polymerDes->getAttribute('description');
			}
			foreach my $taxonomy ($polymer->findnodes('Taxonomy'))
			{
				print "\nTAXONOMY:  "; 
				print $taxonomy->getAttribute('name');
			}
			foreach my $chain ($polymer->findnodes('chain'))
			{
				print "\nCHAIN:     ";
				print $chain->getAttribute('id');
			}
			print "\nLENGTH:    ";
			print $polymer->getAttribute('length');
			print "\nTYPE:      ";
			print $polymer->getAttribute('type');
			print "\nWEIGHT:    ";
			print $polymer->getAttribute('weight');
			foreach my $fragment ($polymer->findnodes('fragment'))
			{
				print "\nFRAGMENT:  ";
				print $fragment->getAttribute('desc');	
			}
		}
	}
	if ($type eq "head")
	{
		foreach my $PDB ($xml->findnodes('//PDB'))
		{
			print "\nTITLE:      ";
			print $PDB->getAttribute('title');
			print "\nMETHOD:     ";
			print $PDB->getAttribute('expMethod');
			print "\nRESOLUTION: ";
			print $PDB->getAttribute('resolution');
			print "\nKEYWORDS:   ";
			print $PDB->getAttribute('keywords');
			print "\nENTITIES:   ";
			print $PDB->getAttribute('nr_entities');
			print "\nRESIDUES:   ";
			print $PDB->getAttribute('nr_residues');
			print "\nATOMS:      ";	
			print $PDB->getAttribute('nr_atoms');
			print "\nAUTHORS:    ";
			print $PDB->getAttribute('citation_authors');
			print "\nDEP DATE:   ";
			print $PDB->getAttribute('deposition_date');
		}
	}
	if ($type eq "seq")
	{
		foreach my $seq ($xml->findnodes('//SEQUENCE'))
		{
			if($vb)
			{
				print "SEQUENCE ";
				print $seq->getAttribute('id');
			}
			my $seqstr = $seq->string_value();
			if($::clr){seq_color($seqstr);}
			elsif($::hi){seq_hi($seqstr,$::hi);}
			else{print $seqstr;}
		}
	}
	if ($type eq "lig")
	{
		foreach my $ligand ($xml->findnodes('//ligand'))
		{
			foreach my $chemicalName ($ligand->findnodes('chemicalName'))
			{
				print "\nNAME:       ";
				print $chemicalName->string_value();
			} 
			foreach my $formula ($ligand->findnodes('formula'))
			{
				print "\nFORMULA:    ";
				print $formula->string_value();
			}
			print "\nCHEM ID:    ";
			print $ligand->getAttribute('chemicalID');
			print "\nTYPE:       ";
			print $ligand->getAttribute('type');
			print "\nWEIGHT:     ";
			print $ligand->getAttribute('molecularWeight');
			print "\n";
		}
	}
	if ($type eq "go")
	{
		foreach my $term ($xml->findnodes('//term'))
		{
			foreach my $detail ($term->findnodes('detail'))
			{
				print "\nNAME:    ";
				print $detail->getAttribute('name');
				print "\n";
				print $detail->getAttribute('definition');
				print "\n\n";
			}
		}
	}
}

my $help = ''; my $molid = ''; my $head = '';
my $seq  = ''; my $grab = ''; my $lig  = '';
my $go   = ''; my $blast = ''; my $search = ''; 
our $vb=''; our $clr =''; our $hi ='';

# CLI PATTERN
# --search (type) --opt1 (val) opt2 (val) ...
my $min=''; my $max='';
# TITLE --- title
# ORGANISM --- organism
# REVISION & RELEASE DATE  --- revisionDate || releaseDate
# AUTHOR - author
# MACROMOLECULE --- macromolecule
my $protein = ''; my $DNA = '';
my $RNA = ''; my $hybrid = '';
# CHAIN NUMBER --- chainNum
my $assembly = '';
# ENTITY NUMBER --- entNum
# BINDING --- binding
# SEQUENCE MOTIF --- seqMotif
my $motif = '';
# CHEMICAL COMPONENT --- chemName
my $name = ''; my $target = ''; my $polymerType = '';

GetOptions ('help'     => \$help,
	    'molid'        => \$molid,
	    'head'         => \$head,
	    'seq=s'        => \$seq,
	    'grab'         => \$grab,
	    'lig'          => \$lig,
	    'go'           => \$go,
		'blast=s'      => \$blast,
		'min=s'		   => \$min,
		'max=s'		   => \$max,
		'search=s'     => \$search,
		'protein=s'    => \$protein,
		'DNA=s'		   => \$DNA,
		'RNA=s' 	   => \$RNA,
		'hybrid=s'     => \$hybrid,
		'assembly=s'   => \$assembly,
		'motif=s'	   => \$motif,
		'name=s'       => \$name,
		'target=s'	   => \$target,
		'polymerType=s'=> \$polymerType,
		'vb'		   => \$vb,
		'hi=s'		   => \$hi,
		'clr'		   => \$clr);

if($hi)
{
	use Term::ANSIColor;
	our %nonpolar = ( 'G' => 1,
		'A' => 1, 'V' => 1, 'L' => 1,
		'I' => 1, 'P' => 1);
	our %polar = ('S' => 1, 'T' => 1,
		'C' => 1, 'M' => 1, 'N' => 1,
		'Q' => 1);
	our %pos = ( 'K' => 1, 'R' => 1, 
		'H' => 1);
	our %neg = ('D' => 1, 'E' => 1);
	our %aromatic = ('F' => 1, 
		'Y' => 1, 'W' => 1); 

	sub seq_hi {
		my ($seq,$kind) = @_;
		if ($kind eq 'nonpolar')
		{
			foreach my $aa (split //,$seq)
			{
				if($nonpolar{$aa}){print colored($aa,'REVERSE');}
				else{ print $aa;}
			}
		}
		if ($kind eq 'polar')
		{
			foreach my $aa (split //,$seq)
			{
				if($polar{$aa}){print colored($aa,'REVERSE');}
				else{ print $aa;}
			}
		}
		if ($kind eq 'pos')
		{
			foreach my $aa (split //,$seq)
			{
				if($pos{$aa}){print colored($aa,'REVERSE');}
				else{ print $aa;}
			}
		}
		if ($kind eq 'neg')
		{
			foreach my $aa (split //,$seq)
			{
				if($neg{$aa}){print colored($aa,'REVERSE');}
				else{ print $aa;}
			}
		}
		if ($kind eq 'aromatic')
		{
			foreach my $aa (split //,$seq)
			{
				if($aromatic{$aa}){print colored($aa,'REVERSE');}
				else{ print $aa;}
			}
		}
	}		
}

if($clr)
{
	use Term::ANSIColor;
	our %nonpolar = ( 'G' => 1,
		'A' => 1, 'V' => 1, 'L' => 1,
		'I' => 1, 'P' => 1);
	our %polar = ('S' => 1, 'T' => 1,
		'C' => 1, 'M' => 1, 'N' => 1,
		'Q' => 1);
	our %pos = ( 'K' => 1, 'R' => 1, 
		'H' => 1);
	our %neg = ('D' => 1, 'E' => 1);
	our %aromatic = ('F' => 1, 
		'Y' => 1, 'W' => 1); 
	sub seq_color {
		my($seq) = @_;
		# POLAR       -> cyan
		# HYDROPHOBIC -> green
		# CHARGED +   -> red
		# CHARGED -   -> blue
		# NONSTANDARD -> white
		print colored("<NP> ",'green');
		print colored("<P> ",'cyan');
		print colored("<+> ",'red');
		print colored("<-> ",'blue');
		print colored("<A> \n",'magenta');
		foreach my $aa (split //,$seq)
		{
			if($nonpolar{$aa}){print colored($aa,'green');}
			elsif($polar{$aa}){print colored($aa,'cyan');}
			elsif($pos{$aa}){print colored($aa,'red');}
			elsif($neg{$aa}){print colored($aa,'blue');}
			elsif($aromatic{$aa}){print colored($aa,'magenta');}
			else{ print $aa;}
		}
	}		 
}

if ($help)
{
    print "\nYYPDB \n\n";
	print "FETCH SERVICES:\n"; 
    print "usage: yypdb [flags] [str]\n";
	print "\n  --vb                                    verbose mode";
    print "\n  --molid [PDBID]                         get molecule info";
    print "\n  --header [PDBID]                        get header info";
    print "\n  --seq [PDBID.A.B.C ...] --clr --hi      get amino acid sequence for each chain;
                                          use colors based on amino acid type; 
                                          highlight (nonpolar,polar,positive,negative,aromatic)";
    print "\n  --lig [PDBID]                           get ligand info";
    print "\n  --go [PDBID]                            get gene associated ontology info";
    print "\n  --grab [PDBID]                          save pbd file to local directory";
    print "\n";
	print "\nSEARCH SERVICES:\n";
	print "usage: yypdb [optional verbose] --search [search type] [params]\n\n";
	print "  --vb                                    verbose mode\n";
	print "  title [str]		                  search PDBIDs by title\n";
	print "  author [str]		                  search PDBIDs by citation author\n";
	print "  organism [str]                          search PDBIDs by associated organism\n";
	print "  seqMotif --motif [str]                  search PDBIDs by sequence filter\n";
	print "  revisionDate --min [y-m-d] --max [y-m-d] 
			                  search PDBIDs by revision dates\n"; 
	print "  releaseDate --min [y-m-d] --max [y-m-d]  
			                  search PDBIDs by release dates\n\n";
	print "  macromolecu:wle --protein [y/n] --DNA [y/n] --RNA [y/n]
    --hybrid [y/n]                        serach PDBIDs by macromolecule type\n\n";
	print "  chainNum --assembly [asymmetric/biological]
    --min [min] --max [max]               search PDBIDs by number of chains\n\n";
	print "  entNum --min [min] --max [max]          search PDBIDs by entity number\n";
	print "  binding --min [min] --max[max]          search PDBIDS by ki binding affinity\n";
	print "  chemName --name [str] --target [str] --polymerType [str]
		                          search PDBIDs by chemical subcomponent"; 
    exit;
}

my $keyword = "$ARGV[$#ARGV]";
our $query='';
our $meta='title';
if ($search)
{
	my $type = $search;
	if ($type eq 'title') #works
	{
		print "\n>>> Searching PDB for $ARGV[$#ARGV]...";
		$query = query_gen(type => $type, title => $ARGV[$#ARGV]);
	}
	if ($type eq 'author') #works
	{
		print "\n>>> Searching PDB for author $ARGV[$#ARGV]...";
		$query = query_gen(type => $type, author => $ARGV[$#ARGV]);
		$meta = 'author';
	}
	if ($type eq 'organism') #works
	{
		print "\n>>> Searching PDB by organism $ARGV[$#ARGV]...";
		$query = query_gen(type => $type, organism => $ARGV[$#ARGV]);
	}
	if ($type eq 'revisionDate') #works
	{
		print "\n>>> Searching PDB by revision date from $min to $max...";
		$query = query_gen(type => $type, 
							min => $min, 
							max => $max);
	}	
	if ($type eq 'releaseDate') #works
	{
		print "\n>>> Searching PDB by release date from $min to $max...";
		$query = query_gen(type => $type, 
							min => $min, 
							max => $max);
	}
	if ($type eq 'macromolecule') #works
	{
		print "\n>>> Searching PDB by macromolecule...";
		$query = query_gen(type => $type, 
							protein => $protein, 
							DNA => $DNA,	
							RNA => $RNA, 
							hybrid => $hybrid); 
	}
	if ($type eq 'chainNum') #works
	{
		print "\n>>> Searching PDB for entries containing $min to $max chains...";
		$query = query_gen(type => $type, 
							assembly => $assembly, 
							min => $min, 
							max => $max);
	}
	if ($type eq 'entNum') #works
	{
		print "\n>>> Searching PDB for entries containing $min to $max entities...";
		$query = query_gen(type => $type,
							min => $min,
							max => $max);
	}
	if ($type eq 'binding') #works
	{
		print "\n>>> Searching PDB for binding affinities between $min and $max...";
		$query = query_gen(type => $type,
							min => $min,
							max => $max);
	}
	if ($type eq 'seqMotif') #works
	{
		print "\n>>> Searching for PDB entires with seqeucenc motif $motif...";
		if (grep(/'.'/,$motif))
		{
				
		}
		$query = query_gen(type => 'seqMotif',
							motif => $motif);
	}
	if ($type eq 'chemName')
	{
		print "\n>>> Searching for PDB entries containing $name...";
		$query = query_gen(type => $type,
							name => $name,
							target => $target,
							polymerType => $polymerType);
	}	
	my $request = HTTP::Request->new( POST => ${rest_search});
	$request->content_type( 'application/x-www-form-urlencoded' );
	$request->content( $query );
	my $response = $ua->request($request);
	my @entries = split("\n",$response->content);
	if ( $#entries eq -1 ){print " 0 entries found.";}
	else
	{
		print " @{[$#entries + 1]} entries found.";
		print "\nDisplaying all results. ^C to abort...";
		print "\nThis may take a few seconds...\n\n";
		if($vb)
		{
			id_to_name(IDlist_ref => \@entries, meta => $meta) 
		}
		else
		{
			print "$_\n" for @entries;
		}
	}
}
my $url='';
my $get='';
my $xmlget='';
if ($molid)
{
	#print "\n>>> Fetching Molecule Info for ID $keyword...\n";
	$url = join("","$mol_url","$keyword");
	$get = `wget -q -O - \"$url\"`; 
	$xmlget = XML::LibXML->load_xml(string => $get);
	disp_xml($xmlget,"molid",$vb);
	print "\n";
}
if ($head)
{
	#print "\n>>> Fetching PDB Info for ID $keyword...\n";
	$url = join("","$pdb_url","$keyword");
	$get = `wget -q -O - \"$url\"`;
	$xmlget = XML::LibXML->load_xml(string => $get);
	disp_xml($xmlget,"head",$vb);
	print "\n";
}
if ($seq ne '')
{
	$seq =~tr/a-z/A-Z/;
	my @seqarr = split /\./, "$seq";	
	my $keyword = shift(@seqarr);
	foreach my $chain (@seqarr)
	{
		my $url = join("","$das_url","$keyword",".","$chain");
		my $get = `wget -q -O - \"$url\"`;
		my $xmlget = XML::LibXML->load_xml(string => $get);
		disp_xml($xmlget,"seq",$vb);
	}	
}
if ($lig)
{
	#print "\n>>> Fetching ligands...\n\n";
	$url = join("","$ligand_url","$keyword");
	$get = `wget -q -O - \"$url\"`;
	$xmlget = XML::LibXML->load_xml(string => $get);
	disp_xml($xmlget,"lig",$vb);
	print "\n"; 
}
if ($go)
{
	if($vb)
	{
	#	print "\n>>> Fetching associated gene ontology terms...\n\n";
	}
	$url = join("","$go_url","$keyword");
	$get = `wget -q -O - \"$url\"`;
	$xmlget = XML::LibXML->load_xml(string => $get);
	disp_xml($xmlget,"go",$vb);
	print "\n"; 
}
if ($grab)
{
	#print "\n>>> Saving PDB $keyword to local directory...\n";
	$url = join("","$grab_url","$keyword",".ent.gz");
	$get = `wget -q \"$url\"`;
}
